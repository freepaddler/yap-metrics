# POST /update

## FAILED

### GET /update wrong method
# curl -i http://localhost:8080/update/counter/name/value
GET http://localhost:8080/update/counter/name/value

> assert_405_MethodNotAllowed.js

### POST /update missing name
# curl -X POST -i http://localhost:8080/update/counter/qwe
POST http://localhost:8080/update/counter/qwe

> assert_404_NotFound.js

### POST /update missing value
# curl -X POST -i http://localhost:8080/update/counter/qwe/
POST http://localhost:8080/update/counter/qwe/

> assert_404_NotFound.js

### POST /update invalid metric
# curl -X POST -i http://localhost:8080/update/counter1/c1/10
POST  http://localhost:8080/update/counter1/c1/10

> assert_400_BadRequest.js

### POST /update counter float
# curl -X POST -i http://localhost:8080/update/counter/c1/10.002
POST  http://localhost:8080/update/counter/c1/10.002

> assert_400_BadRequest.js

### POST /update gauge string
# curl -X POST -i http://localhost:8080/update/gauge/g1/none
POST http://localhost:8080/update/gauge/g1/none

> assert_400_BadRequest.js

### POST /update too many params
# curl -X POST -i http://localhost:8080/update/counter/c1/10/20/30/40
POST http://localhost:8080/update/counter/c1/10/20/30/40

> assert_404_NotFound.js

## SUCCESS

### POST /update new gauge
# curl -X POST -i http://localhost:8080/update/gauge/g1/-1.75
POST http://localhost:8080/update/gauge/g1/-1.75

> assert_200_OK.js

### POST /update same gauge
# curl -X POST -i http://localhost:8080/update/gauge/g1/1.0
POST http://localhost:8080/update/gauge/g1/1.0

> assert_200_OK.js

### POST /update new counter
# curl -X POST -i http://localhost:8080/update/counter/c1/10
POST http://localhost:8080/update/counter/c1/10

> assert_200_OK.js

### POST /update same counter
# curl -X POST -i http://localhost:8080/update/counter/c1/20
POST http://localhost:8080/update/counter/c1/20

> assert_200_OK.js


#### POST /update missing metric
## curl -X POST -i http://localhost:8080/update
#POST http://localhost:8080/update
#
#> assert_404_NotFound.js

# GET /value

## FAIL

### POST /value wrong method
# curl -X POST -i http://localhost:8080/value/counter/c1
POST http://localhost:8080/value/counter/c1

> assert_405_MethodNotAllowed.js

### GET /value missing type
# curl -i http://localhost:8080/value/
GET http://localhost:8080/value/

> assert_404_NotFound.js

### GET /value missing name
# curl -i http://localhost:8080/value/counter/
GET http://localhost:8080/value/counter/

> assert_404_NotFound.js

### GET /value wrong type
# curl -i http://localhost:8080/value/counter1/qwe
GET http://localhost:8080/value/counter1/qwe

> assert_400_BadRequest.js

### GET /value wrong name
# curl -i http://localhost:8080/value/counter/qwe
GET http://localhost:8080/value/counter/qwe

> assert_404_NotFound.js

### POST /value empty body
# curl -X POST -i http://localhost:8080/value -d ''
POST  http://localhost:8080/value

> assert_400_BadRequest.js

### POST /value invalid metric type
# curl -X POST -i http://localhost:8080/value -d '{"id":"g1","type":"something"}'
POST  http://localhost:8080/value

{"id":"g1","type":"something"}

> assert_400_BadRequest.js

### POST /value absent metric name
# curl -X POST -i http://localhost:8080/value -d '{"id":"c5","type":"counter"}'
POST  http://localhost:8080/value

{"id":"c5","type":"counter"}

> assert_404_NotFound.js

### SUCCESS

### GET /value/counter/c1 counter=30
# curl -i http://localhost:8080/value/counter/c1
GET http://localhost:8080/value/counter/c1

> {%
    client.log(JSON.stringify(response))
    client.test("Check response", function () {
        client.assert(response.status === 200, "Invalid response. Expected 200 OK")
    })
    client.test("Check body", function () {
        client.assert(response.body == "30")
    } )
%}

### GET /value/gauge/g1 gauge=1.0000
# curl -i http://localhost:8080/value/gauge/g1
GET http://localhost:8080/value/gauge/g1

> {%
    client.log(JSON.stringify(response))
    client.test("Check response", function () {
        client.assert(response.status === 200, "Invalid response. Expected 200 OK")
    })
    client.test("Check body", function () {
        client.assert(response.body.toString() == "1")
    } )
%}

### POST /value g1 gauge=1
# curl -X POST -i http://localhost:8080/value -d '{"id":"g1","type":"gauge"}'
POST  http://localhost:8080/value

{"id":"g1","type":"gauge"}

> {%
    client.log(JSON.stringify(response))
    client.test("Check response", function () {
        client.assert(response.status === 200, "Invalid response. Expected 200 OK")
    })
    client.test("Check content-type", function () {
        client.assert(response.headers.valueOf("Content-Type") === "application/json")
    })
    okRes={
        "id": "g1",
        "type": "gauge",
        "value": 1
    }
    client.test("Check response", function () {
        client.assert(JSON.stringify(response.body) === JSON.stringify(okRes))
    })
%}

### POST /value c1 counter=30
# curl -X POST -i http://localhost:8080/value -d '{"id":"gc","type":"counter"}'
POST  http://localhost:8080/value

{"id":"c1","type":"counter"}

> {%
    client.log(JSON.stringify(response))
    client.test("Check response", function () {
        client.assert(response.status === 200, "Invalid response. Expected 200 OK")
    })
    client.test("Check content-type", function () {
        client.assert(response.headers.valueOf("Content-Type") === "application/json")
    })
    okRes={
        "id": "c1",
        "type": "counter",
        "delta": 30
    }
    client.test("Check response", function () {
        client.assert(JSON.stringify(response.body) === JSON.stringify(okRes))
    })
%}








