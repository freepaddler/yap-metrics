// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/freepaddler/yap-metrics/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockGauge is a mock of Gauge interface.
type MockGauge struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMockRecorder
}

// MockGaugeMockRecorder is the mock recorder for MockGauge.
type MockGaugeMockRecorder struct {
	mock *MockGauge
}

// NewMockGauge creates a new mock instance.
func NewMockGauge(ctrl *gomock.Controller) *MockGauge {
	mock := &MockGauge{ctrl: ctrl}
	mock.recorder = &MockGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGauge) EXPECT() *MockGaugeMockRecorder {
	return m.recorder
}

// DelGauge mocks base method.
func (m *MockGauge) DelGauge(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelGauge", name)
}

// DelGauge indicates an expected call of DelGauge.
func (mr *MockGaugeMockRecorder) DelGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelGauge", reflect.TypeOf((*MockGauge)(nil).DelGauge), name)
}

// GetGauge mocks base method.
func (m *MockGauge) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeMockRecorder) GetGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGauge)(nil).GetGauge), name)
}

// SetGauge mocks base method.
func (m *MockGauge) SetGauge(name string, value float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockGaugeMockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockGauge)(nil).SetGauge), name, value)
}

// MockCounter is a mock of Counter interface.
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter.
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance.
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// DelCounter mocks base method.
func (m *MockCounter) DelCounter(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelCounter", name)
}

// DelCounter indicates an expected call of DelCounter.
func (mr *MockCounterMockRecorder) DelCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCounter", reflect.TypeOf((*MockCounter)(nil).DelCounter), name)
}

// GetCounter mocks base method.
func (m *MockCounter) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterMockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounter)(nil).GetCounter), name)
}

// IncCounter mocks base method.
func (m *MockCounter) IncCounter(name string, value int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncCounter", name, value)
	ret0, _ := ret[0].(int64)
	return ret0
}

// IncCounter indicates an expected call of IncCounter.
func (mr *MockCounterMockRecorder) IncCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounter", reflect.TypeOf((*MockCounter)(nil).IncCounter), name, value)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DelCounter mocks base method.
func (m *MockStore) DelCounter(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelCounter", name)
}

// DelCounter indicates an expected call of DelCounter.
func (mr *MockStoreMockRecorder) DelCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCounter", reflect.TypeOf((*MockStore)(nil).DelCounter), name)
}

// DelGauge mocks base method.
func (m *MockStore) DelGauge(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelGauge", name)
}

// DelGauge indicates an expected call of DelGauge.
func (mr *MockStoreMockRecorder) DelGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelGauge", reflect.TypeOf((*MockStore)(nil).DelGauge), name)
}

// GetCounter mocks base method.
func (m *MockStore) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockStoreMockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockStore)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockStore) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockStoreMockRecorder) GetGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockStore)(nil).GetGauge), name)
}

// IncCounter mocks base method.
func (m *MockStore) IncCounter(name string, value int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncCounter", name, value)
	ret0, _ := ret[0].(int64)
	return ret0
}

// IncCounter indicates an expected call of IncCounter.
func (mr *MockStoreMockRecorder) IncCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounter", reflect.TypeOf((*MockStore)(nil).IncCounter), name, value)
}

// Ping mocks base method.
func (m *MockStore) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping))
}

// SetGauge mocks base method.
func (m *MockStore) SetGauge(name string, value float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockStoreMockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockStore)(nil).SetGauge), name, value)
}

// Snapshot mocks base method.
func (m *MockStore) Snapshot(flush bool) []models.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", flush)
	ret0, _ := ret[0].([]models.Metrics)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStoreMockRecorder) Snapshot(flush interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStore)(nil).Snapshot), flush)
}
