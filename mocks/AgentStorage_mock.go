// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/freepaddler/yap-metrics/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCollectorStorage is a mock of CollectorStorage interface.
type MockCollectorStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorStorageMockRecorder
}

// MockCollectorStorageMockRecorder is the mock recorder for MockCollectorStorage.
type MockCollectorStorageMockRecorder struct {
	mock *MockCollectorStorage
}

// NewMockCollectorStorage creates a new mock instance.
func NewMockCollectorStorage(ctrl *gomock.Controller) *MockCollectorStorage {
	mock := &MockCollectorStorage{ctrl: ctrl}
	mock.recorder = &MockCollectorStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorStorage) EXPECT() *MockCollectorStorageMockRecorder {
	return m.recorder
}

// CollectCounter mocks base method.
func (m *MockCollectorStorage) CollectCounter(name string, val int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectCounter", name, val)
}

// CollectCounter indicates an expected call of CollectCounter.
func (mr *MockCollectorStorageMockRecorder) CollectCounter(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectCounter", reflect.TypeOf((*MockCollectorStorage)(nil).CollectCounter), name, val)
}

// CollectGauge mocks base method.
func (m *MockCollectorStorage) CollectGauge(name string, val float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectGauge", name, val)
}

// CollectGauge indicates an expected call of CollectGauge.
func (mr *MockCollectorStorageMockRecorder) CollectGauge(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectGauge", reflect.TypeOf((*MockCollectorStorage)(nil).CollectGauge), name, val)
}

// MockReporterStorage is a mock of ReporterStorage interface.
type MockReporterStorage struct {
	ctrl     *gomock.Controller
	recorder *MockReporterStorageMockRecorder
}

// MockReporterStorageMockRecorder is the mock recorder for MockReporterStorage.
type MockReporterStorageMockRecorder struct {
	mock *MockReporterStorage
}

// NewMockReporterStorage creates a new mock instance.
func NewMockReporterStorage(ctrl *gomock.Controller) *MockReporterStorage {
	mock := &MockReporterStorage{ctrl: ctrl}
	mock.recorder = &MockReporterStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporterStorage) EXPECT() *MockReporterStorageMockRecorder {
	return m.recorder
}

// ReportAll mocks base method.
func (m *MockReporterStorage) ReportAll() ([]models.Metrics, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportAll")
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// ReportAll indicates an expected call of ReportAll.
func (mr *MockReporterStorageMockRecorder) ReportAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportAll", reflect.TypeOf((*MockReporterStorage)(nil).ReportAll))
}

// RestoreLatest mocks base method.
func (m *MockReporterStorage) RestoreLatest(metrics []models.Metrics, ts time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreLatest", metrics, ts)
}

// RestoreLatest indicates an expected call of RestoreLatest.
func (mr *MockReporterStorageMockRecorder) RestoreLatest(metrics, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreLatest", reflect.TypeOf((*MockReporterStorage)(nil).RestoreLatest), metrics, ts)
}

// MockReporter is a mock of Reporter interface.
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter.
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance.
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockReporter) Send(arg0 []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReporterMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReporter)(nil).Send), arg0)
}

// MockAgentStorage is a mock of AgentStorage interface.
type MockAgentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAgentStorageMockRecorder
}

// MockAgentStorageMockRecorder is the mock recorder for MockAgentStorage.
type MockAgentStorageMockRecorder struct {
	mock *MockAgentStorage
}

// NewMockAgentStorage creates a new mock instance.
func NewMockAgentStorage(ctrl *gomock.Controller) *MockAgentStorage {
	mock := &MockAgentStorage{ctrl: ctrl}
	mock.recorder = &MockAgentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentStorage) EXPECT() *MockAgentStorageMockRecorder {
	return m.recorder
}

// CollectCounter mocks base method.
func (m *MockAgentStorage) CollectCounter(name string, val int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectCounter", name, val)
}

// CollectCounter indicates an expected call of CollectCounter.
func (mr *MockAgentStorageMockRecorder) CollectCounter(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectCounter", reflect.TypeOf((*MockAgentStorage)(nil).CollectCounter), name, val)
}

// CollectGauge mocks base method.
func (m *MockAgentStorage) CollectGauge(name string, val float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectGauge", name, val)
}

// CollectGauge indicates an expected call of CollectGauge.
func (mr *MockAgentStorageMockRecorder) CollectGauge(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectGauge", reflect.TypeOf((*MockAgentStorage)(nil).CollectGauge), name, val)
}

// ReportAll mocks base method.
func (m *MockAgentStorage) ReportAll() ([]models.Metrics, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportAll")
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// ReportAll indicates an expected call of ReportAll.
func (mr *MockAgentStorageMockRecorder) ReportAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportAll", reflect.TypeOf((*MockAgentStorage)(nil).ReportAll))
}

// RestoreLatest mocks base method.
func (m *MockAgentStorage) RestoreLatest(metrics []models.Metrics, ts time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreLatest", metrics, ts)
}

// RestoreLatest indicates an expected call of RestoreLatest.
func (mr *MockAgentStorageMockRecorder) RestoreLatest(metrics, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreLatest", reflect.TypeOf((*MockAgentStorage)(nil).RestoreLatest), metrics, ts)
}
