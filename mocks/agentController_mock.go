// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/freepaddler/yap-metrics/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAgentController is a mock of AgentController interface.
type MockAgentController struct {
	ctrl     *gomock.Controller
	recorder *MockAgentControllerMockRecorder
}

// MockAgentControllerMockRecorder is the mock recorder for MockAgentController.
type MockAgentControllerMockRecorder struct {
	mock *MockAgentController
}

// NewMockAgentController creates a new mock instance.
func NewMockAgentController(ctrl *gomock.Controller) *MockAgentController {
	mock := &MockAgentController{ctrl: ctrl}
	mock.recorder = &MockAgentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentController) EXPECT() *MockAgentControllerMockRecorder {
	return m.recorder
}

// CollectCounter mocks base method.
func (m *MockAgentController) CollectCounter(name string, val int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectCounter", name, val)
}

// CollectCounter indicates an expected call of CollectCounter.
func (mr *MockAgentControllerMockRecorder) CollectCounter(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectCounter", reflect.TypeOf((*MockAgentController)(nil).CollectCounter), name, val)
}

// CollectGauge mocks base method.
func (m *MockAgentController) CollectGauge(name string, val float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectGauge", name, val)
}

// CollectGauge indicates an expected call of CollectGauge.
func (mr *MockAgentControllerMockRecorder) CollectGauge(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectGauge", reflect.TypeOf((*MockAgentController)(nil).CollectGauge), name, val)
}

// ReportAll mocks base method.
func (m *MockAgentController) ReportAll() ([]models.Metrics, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportAll")
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// ReportAll indicates an expected call of ReportAll.
func (mr *MockAgentControllerMockRecorder) ReportAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportAll", reflect.TypeOf((*MockAgentController)(nil).ReportAll))
}

// RestoreReport mocks base method.
func (m *MockAgentController) RestoreReport(metrics []models.Metrics, ts time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreReport", metrics, ts)
}

// RestoreReport indicates an expected call of RestoreReport.
func (mr *MockAgentControllerMockRecorder) RestoreReport(metrics, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReport", reflect.TypeOf((*MockAgentController)(nil).RestoreReport), metrics, ts)
}
