// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_new.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/freepaddler/yap-metrics/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockGauge1 is a mock of Gauge1 interface.
type MockGauge1 struct {
	ctrl     *gomock.Controller
	recorder *MockGauge1MockRecorder
}

// MockGauge1MockRecorder is the mock recorder for MockGauge1.
type MockGauge1MockRecorder struct {
	mock *MockGauge1
}

// NewMockGauge1 creates a new mock instance.
func NewMockGauge1(ctrl *gomock.Controller) *MockGauge1 {
	mock := &MockGauge1{ctrl: ctrl}
	mock.recorder = &MockGauge1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGauge1) EXPECT() *MockGauge1MockRecorder {
	return m.recorder
}

// DelGauge mocks base method.
func (m *MockGauge1) DelGauge(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelGauge", name)
}

// DelGauge indicates an expected call of DelGauge.
func (mr *MockGauge1MockRecorder) DelGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelGauge", reflect.TypeOf((*MockGauge1)(nil).DelGauge), name)
}

// GetGauge mocks base method.
func (m *MockGauge1) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGauge1MockRecorder) GetGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGauge1)(nil).GetGauge), name)
}

// SetGauge mocks base method.
func (m *MockGauge1) SetGauge(name string, value float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockGauge1MockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockGauge1)(nil).SetGauge), name, value)
}

// MockCounter1 is a mock of Counter1 interface.
type MockCounter1 struct {
	ctrl     *gomock.Controller
	recorder *MockCounter1MockRecorder
}

// MockCounter1MockRecorder is the mock recorder for MockCounter1.
type MockCounter1MockRecorder struct {
	mock *MockCounter1
}

// NewMockCounter1 creates a new mock instance.
func NewMockCounter1(ctrl *gomock.Controller) *MockCounter1 {
	mock := &MockCounter1{ctrl: ctrl}
	mock.recorder = &MockCounter1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter1) EXPECT() *MockCounter1MockRecorder {
	return m.recorder
}

// DelCounter mocks base method.
func (m *MockCounter1) DelCounter(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelCounter", name)
}

// DelCounter indicates an expected call of DelCounter.
func (mr *MockCounter1MockRecorder) DelCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCounter", reflect.TypeOf((*MockCounter1)(nil).DelCounter), name)
}

// GetCounter mocks base method.
func (m *MockCounter1) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounter1MockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounter1)(nil).GetCounter), name)
}

// IncCounter mocks base method.
func (m *MockCounter1) IncCounter(name string, value int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncCounter", name, value)
	ret0, _ := ret[0].(int64)
	return ret0
}

// IncCounter indicates an expected call of IncCounter.
func (mr *MockCounter1MockRecorder) IncCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounter", reflect.TypeOf((*MockCounter1)(nil).IncCounter), name, value)
}

// MockMemoryStore is a mock of MemoryStore interface.
type MockMemoryStore struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryStoreMockRecorder
}

// MockMemoryStoreMockRecorder is the mock recorder for MockMemoryStore.
type MockMemoryStoreMockRecorder struct {
	mock *MockMemoryStore
}

// NewMockMemoryStore creates a new mock instance.
func NewMockMemoryStore(ctrl *gomock.Controller) *MockMemoryStore {
	mock := &MockMemoryStore{ctrl: ctrl}
	mock.recorder = &MockMemoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryStore) EXPECT() *MockMemoryStoreMockRecorder {
	return m.recorder
}

// DelCounter mocks base method.
func (m *MockMemoryStore) DelCounter(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelCounter", name)
}

// DelCounter indicates an expected call of DelCounter.
func (mr *MockMemoryStoreMockRecorder) DelCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCounter", reflect.TypeOf((*MockMemoryStore)(nil).DelCounter), name)
}

// DelGauge mocks base method.
func (m *MockMemoryStore) DelGauge(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DelGauge", name)
}

// DelGauge indicates an expected call of DelGauge.
func (mr *MockMemoryStoreMockRecorder) DelGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelGauge", reflect.TypeOf((*MockMemoryStore)(nil).DelGauge), name)
}

// GetCounter mocks base method.
func (m *MockMemoryStore) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMemoryStoreMockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMemoryStore)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockMemoryStore) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMemoryStoreMockRecorder) GetGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMemoryStore)(nil).GetGauge), name)
}

// IncCounter mocks base method.
func (m *MockMemoryStore) IncCounter(name string, value int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncCounter", name, value)
	ret0, _ := ret[0].(int64)
	return ret0
}

// IncCounter indicates an expected call of IncCounter.
func (mr *MockMemoryStoreMockRecorder) IncCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounter", reflect.TypeOf((*MockMemoryStore)(nil).IncCounter), name, value)
}

// SetGauge mocks base method.
func (m *MockMemoryStore) SetGauge(name string, value float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockMemoryStoreMockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockMemoryStore)(nil).SetGauge), name, value)
}

// Snapshot mocks base method.
func (m *MockMemoryStore) Snapshot(flush bool) []models.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", flush)
	ret0, _ := ret[0].([]models.Metrics)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockMemoryStoreMockRecorder) Snapshot(flush interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockMemoryStore)(nil).Snapshot), flush)
}

// MockDumper is a mock of Dumper interface.
type MockDumper struct {
	ctrl     *gomock.Controller
	recorder *MockDumperMockRecorder
}

// MockDumperMockRecorder is the mock recorder for MockDumper.
type MockDumperMockRecorder struct {
	mock *MockDumper
}

// NewMockDumper creates a new mock instance.
func NewMockDumper(ctrl *gomock.Controller) *MockDumper {
	mock := &MockDumper{ctrl: ctrl}
	mock.recorder = &MockDumperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDumper) EXPECT() *MockDumperMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockDumper) Dump(metrics []models.Metrics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dump", metrics)
}

// Dump indicates an expected call of Dump.
func (mr *MockDumperMockRecorder) Dump(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockDumper)(nil).Dump), metrics)
}

// Restore mocks base method.
func (m *MockDumper) Restore() []models.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore")
	ret0, _ := ret[0].([]models.Metrics)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockDumperMockRecorder) Restore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockDumper)(nil).Restore))
}
