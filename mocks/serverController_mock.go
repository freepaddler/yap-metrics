// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/freepaddler/yap-metrics/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockHandler) GetAll() []models.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Metrics)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHandlerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHandler)(nil).GetAll))
}

// GetOne mocks base method.
func (m *MockHandler) GetOne(request models.MetricRequest) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", request)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockHandlerMockRecorder) GetOne(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockHandler)(nil).GetOne), request)
}

// UpdateMany mocks base method.
func (m *MockHandler) UpdateMany(metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockHandlerMockRecorder) UpdateMany(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockHandler)(nil).UpdateMany), metrics)
}

// UpdateOne mocks base method.
func (m *MockHandler) UpdateOne(metric *models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockHandlerMockRecorder) UpdateOne(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockHandler)(nil).UpdateOne), metric)
}

// MockServerController is a mock of ServerController interface.
type MockServerController struct {
	ctrl     *gomock.Controller
	recorder *MockServerControllerMockRecorder
}

// MockServerControllerMockRecorder is the mock recorder for MockServerController.
type MockServerControllerMockRecorder struct {
	mock *MockServerController
}

// NewMockServerController creates a new mock instance.
func NewMockServerController(ctrl *gomock.Controller) *MockServerController {
	mock := &MockServerController{ctrl: ctrl}
	mock.recorder = &MockServerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerController) EXPECT() *MockServerControllerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockServerController) GetAll() []models.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Metrics)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServerControllerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockServerController)(nil).GetAll))
}

// GetOne mocks base method.
func (m *MockServerController) GetOne(request models.MetricRequest) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", request)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockServerControllerMockRecorder) GetOne(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockServerController)(nil).GetOne), request)
}

// UpdateMany mocks base method.
func (m *MockServerController) UpdateMany(metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockServerControllerMockRecorder) UpdateMany(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockServerController)(nil).UpdateMany), metrics)
}

// UpdateOne mocks base method.
func (m *MockServerController) UpdateOne(metric *models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockServerControllerMockRecorder) UpdateOne(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockServerController)(nil).UpdateOne), metric)
}
